git学习

创建版本库
  git config --global user.name "Your Name"
  git config --global user.email "email@example.com"
  git init
  git add
  git commit -m “XXX”
版本回退
  git status
  git log
  git reflog
  git reset --hard HEAD^
  git reset --hard <commit id>
工作区和暂存区
管理修改
撤销修改
  git checkout -- file 丢掉工作区的修改
  git reset HEAD file 把暂存区的修改回退到工作区
  场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
  场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
  场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
删除文件
  git rm file
  git checkout -- file
创建远程仓库
  新建github账号
  你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
    第1步：创建SSH Key
      在用户主目录下（Users/Administrator/.ssh），看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了
    第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
  git remote add origin https://github.com/huzhang2015/FirstDemo.git
  git push -u origin master


添加远程仓库
  要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
  关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
  此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
从远程库克隆
  要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
  Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
  命令
    git clone git@github.com:huzhang2015/gitskills.git
    git clone https://github.com/huzhang2015/gitskills.git
分支管理
  创建与合并分支
    Git鼓励大量使用分支：
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>
    创建+切换分支：git checkout -b <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>
  解决冲突
    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
    用git log --graph命令可以看到分支合并图。
  分支管理策略
    Git分支十分强大，在团队开发中应该充分应用。
    合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
  bug分支
    修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
    当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
  feature分支
    开发一个新feature，最好新建一个分支；
    如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
  多人协作
    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
标签管理
  创建标签
    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
    命令git tag可以查看所有标签。
  操作标签
    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
使用github
  使用github
    在GitHub上，可以任意Fork开源仓库；
    自己拥有Fork后的仓库的读写权限；
    可以推送pull request给官方仓库来贡献代码。
